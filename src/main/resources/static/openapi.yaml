openapi: 3.0.3
info:
  title: VetSecure Admin API
  version: 1.0.0
  description: Admin endpoints for clinic requests intake and clinic management.
servers:
  - url: http://localhost:8080
tags:
  - name: Auth
  - name: Admin - Clinic Requests
  - name: Admin - Clinics
paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Log in and get a JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: admin@vetsecure.local
              password: Admin#12345
      responses:
        '200':
          description: JWT issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                token: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbkB2ZXRzZWN1cmUubG9jYWwifQ...
        '401':
          description: Invalid credentials
  /api/admin/clinic-requests:
    get:
      tags: [Admin - Clinic Requests]
      summary: List clinic requests
      security: [{ bearerAuth: [] }]
      parameters:
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ClinicRequestStatus'
          description: Filter by status
      responses:
        '200':
          description: List of clinic requests
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ClinicRequestDTO' }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /api/admin/clinic-requests/{id}/approve:
    post:
      tags: [Admin - Clinic Requests]
      summary: Approve a clinic request and create a clinic
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Created clinic returned
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClinicDTO' }
        '400': { description: Request not in PENDING state or other business rule failure }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: ClinicRequest not found }
  /api/admin/clinic-requests/{id}/reject:
    post:
      tags: [Admin - Clinic Requests]
      summary: Reject a clinic request
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Updated request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClinicRequestDTO' }
        '400': { description: Request not in PENDING state }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: ClinicRequest not found }
  /api/admin/clinics:
    get:
      tags: [Admin - Clinics]
      summary: List clinics
      security: [{ bearerAuth: [] }]
      parameters:
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ClinicStatus'
          description: Filter by status
      responses:
        '200':
          description: List of clinics
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ClinicDTO' }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
  /api/admin/clinics/{id}:
    get:
      tags: [Admin - Clinics]
      summary: Get a clinic by id
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Clinic
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClinicDTO' }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
  /api/admin/clinics/{id}/deactivate:
    post:
      tags: [Admin - Clinics]
      summary: Deactivate a clinic (status = INACTIVE)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Updated clinic
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClinicDTO' }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
  /api/admin/clinics/{id}/activate:
    post:
      tags: [Admin - Clinics]
      summary: Activate a clinic (status = APPROVED)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: Updated clinic
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ClinicDTO' }
        '401': { description: Unauthorized }
        '403': { description: Forbidden }
        '404': { description: Not found }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    TokenResponse:
      type: object
      required: [token]
      properties:
        token: { type: string }
    ClinicRequestStatus:
      type: string
      enum: [PENDING, APPROVED, REJECTED]
    ClinicStatus:
      type: string
      enum: [PENDING, APPROVED, REJECTED, INACTIVE]
    ClinicRequestDTO:
      type: object
      required: [id, clinicName, address, adminName, adminEmail, status]
      properties:
        id: { type: integer, format: int64 }
        clinicName: { type: string, maxLength: 160 }
        address: { type: string, maxLength: 255 }
        city: { type: string, nullable: true, maxLength: 120 }
        phone: { type: string, nullable: true, maxLength: 40 }
        adminName: { type: string, maxLength: 120 }
        adminEmail: { type: string, format: email, maxLength: 190 }
        status: { $ref: '#/components/schemas/ClinicRequestStatus' }
        decidedAt: { type: string, format: date-time, nullable: true }
        decidedBy: { type: string, nullable: true }
    ClinicDTO:
      type: object
      required: [id, name, address, status]
      properties:
        id: { type: integer, format: int64 }
        name: { type: string, maxLength: 160 }
        address: { type: string, maxLength: 255 }
        city: { type: string, nullable: true, maxLength: 120 }
        phone: { type: string, nullable: true, maxLength: 40 }
        email: { type: string, nullable: true, format: email, maxLength: 190 }
        status: { $ref: '#/components/schemas/ClinicStatus' }
        createdAt: { type: string, format: date-time, nullable: true }
        clinicAdminId: { type: integer, format: int64, nullable: true }
        clinicAdminEmail: { type: string, format: email, nullable: true }
security:
  - bearerAuth: []
